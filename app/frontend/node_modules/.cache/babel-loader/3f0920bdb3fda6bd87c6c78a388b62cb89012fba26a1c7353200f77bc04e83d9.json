{"ast":null,"code":"var _jsxFileName = \"/home/christina/udemy/webdev/wt23-naturdoc/app/frontend/src/components/results/SearchBar.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n// dependencies\nimport parse from \"autosuggest-highlight/parse\";\nimport match from \"autosuggest-highlight/match\";\n// data\nimport { getSymptoms } from \"data/api\";\n// Material UI\nimport { Paper, Container, TextField, Autocomplete } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst SearchBar = _ref => {\n  _s();\n  let {\n    onChange\n  } = _ref;\n  const [options, setOptions] = useState([]);\n\n  // get the complete list of symptoms from the API\n  useEffect(() => {\n    getSymptoms().then(response => {\n      setOptions(response);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n\n  // update the selected value to pass it back to App via onChange\n  const handleChange = (event, value) => {\n    const symptomNames = value.map(item => item.symptomName);\n    onChange(symptomNames);\n    console.log(\"User selected symptom(s):\", value);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: {\n      m: \"16px auto\"\n    },\n    component: \"section\",\n    maxWidth: \"sm\",\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      component: \"article\",\n      sx: {\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        multiple: true,\n        options: options,\n        isOptionEqualToValue: (option, value) => option.symptomName === value.symptomName,\n        getOptionLabel: option => option.symptomName,\n        filterSelectedOptions: true,\n        autoComplete: true,\n        openOnFocus: true,\n        autoSelect: true,\n        autoHighlight: true,\n        clearOnBlur: true,\n        onChange: handleChange,\n        renderOption: (props, option, _ref2) => {\n          let {\n            inputValue,\n            selected\n          } = _ref2;\n          const matches = match(option.symptomName, inputValue, {\n            insideWords: true\n          });\n          const parts = parse(option.symptomName, matches);\n          return /*#__PURE__*/_createElement(\"li\", {\n            ...props,\n            key: option._id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: parts.map((part, index) => {\n              const id = `${option._id}-part-${index}`;\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontWeight: part.highlight ? 700 : 400\n                },\n                children: part.text\n              }, id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this));\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n          autoFocus: true,\n          ...params,\n          label: \"Pick your symptoms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"Cb37lItZDPBl0Zl/uTamqIOmlew=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["useState","useEffect","parse","match","getSymptoms","Paper","Container","TextField","Autocomplete","jsxDEV","_jsxDEV","createElement","_createElement","SearchBar","_ref","_s","onChange","options","setOptions","then","response","catch","err","console","log","handleChange","event","value","symptomNames","map","item","symptomName","sx","m","component","maxWidth","children","textAlign","multiple","isOptionEqualToValue","option","getOptionLabel","filterSelectedOptions","autoComplete","openOnFocus","autoSelect","autoHighlight","clearOnBlur","renderOption","props","_ref2","inputValue","selected","matches","insideWords","parts","key","_id","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","part","index","id","style","fontWeight","highlight","text","renderInput","params","autoFocus","label","_c","$RefreshReg$"],"sources":["/home/christina/udemy/webdev/wt23-naturdoc/app/frontend/src/components/results/SearchBar.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n// dependencies\nimport parse from \"autosuggest-highlight/parse\";\nimport match from \"autosuggest-highlight/match\";\n// data\nimport { getSymptoms } from \"data/api\";\n// Material UI\nimport { Paper, Container, TextField, Autocomplete  } from \"@mui/material\";\n\n\n\nconst  SearchBar= ({ onChange }) => {\n  const [options, setOptions] = useState([]);\n\n  // get the complete list of symptoms from the API\n  useEffect(() => {\n    getSymptoms()\n      .then((response) => {\n        setOptions(response);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  // update the selected value to pass it back to App via onChange\n  const handleChange = (event, value) => {\n    const symptomNames = value.map((item) => item.symptomName);\n    onChange(symptomNames);\n\n    console.log(\"User selected symptom(s):\", value);\n  };\n\n  return (\n    <Container sx={{ m: \"16px auto\" }} component=\"section\" maxWidth=\"sm\">\n      <Paper component=\"article\" sx={{ textAlign: \"center\" }}>\n        <Autocomplete\n          multiple\n          options={options}\n          isOptionEqualToValue={(option, value) => option.symptomName === value.symptomName}\n          getOptionLabel={(option) => option.symptomName}\n          filterSelectedOptions\n          autoComplete\n          openOnFocus\n          autoSelect\n          autoHighlight\n          clearOnBlur\n          onChange={handleChange}\n          renderOption={(props, option, { inputValue, selected }) => {\n            const matches = match(option.symptomName, inputValue, {\n              insideWords: true,\n            });\n            const parts = parse(option.symptomName, matches);\n\n            return (\n              <li {...props} key={option._id}>\n                <div>\n                  {parts.map((part, index) => {\n                    const id = `${option._id}-part-${index}`;\n                    return (\n                    <span\n                      key={id}\n                      style={{ fontWeight: part.highlight ? 700 : 400 }}\n                    >\n                      {part.text}\n                    </span>\n                    )\n                  })}\n                </div>\n              </li>\n            );\n          }}\n          renderInput={(params) => (\n            <TextField autoFocus {...params} label=\"Pick your symptoms\" />\n          )}\n        />\n      </Paper>\n    </Container>\n  );\n}\n\nexport default SearchBar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}