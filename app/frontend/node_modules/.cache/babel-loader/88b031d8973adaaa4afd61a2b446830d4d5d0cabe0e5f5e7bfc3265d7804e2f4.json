{"ast":null,"code":"import axios from \"axios\";\nconst MongoConnect = axios.create({\n  baseURL: 'http://localhost:7000',\n  headers: {}\n});\n\n// --------------------- SYMPTOMS --------------------- //\n\n// Get list of symptoms from backend, if not available, get from local symptoms.JSON\nexport const getSymptoms = async term => {\n  const dbUrl = \"http://localhost:7000/getSymptoms\";\n  const localUrl = '/db/symptoms.json';\n  try {\n    let response = await axios.get(dbUrl, {\n      params: {\n        symptomName: term\n      }\n    });\n    console.log(\"Get list of symptoms from backend:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    try {\n      let response = await axios.get(localUrl, {\n        params: {\n          symptomName: term\n        }\n      });\n      console.log(\"Backup list of symptoms local JSON:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\n\n// --------------------- REMEDIES --------------------- //\n\n// Get list of recommended remedies from backend given the symptoms provided by the user\nexport const getRemedyRecommendation = async term => {\n  try {\n    const response = await MongoConnect.get(\"/getRemedyRecommendation\", {\n      params: {\n        symptomsUser: term\n      }\n    });\n    console.log(\"get remedy recommendations response:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// Get a specific remedy by Id from the backend\nexport const getRemedy = async _id => {\n  try {\n    const response = await MongoConnect.get(`/remedies/${_id}`);\n    console.log(\"get remedy by id response:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// --------------------- RATINGS --------------------- //\n\n// Get a specific remedy's ratings from the backend\nexport const getRatings = async term => {\n  try {\n    const response = await MongoConnect.get(`/remedies/${term}/ratings`);\n    console.log('get rating response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// Post a rating to the backend\nexport const putRating = async (remedy, formValues) => {\n  try {\n    const response = await MongoConnect.put(`/remedies/${remedy._id}/`, {\n      data: {\n        ...formValues\n      }\n    });\n    console.log('put rating response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// --------------------- USERS --------------------- //\n\nexport const getUsers = () => {\n  // HARD-CODED FOR TESTINGS AND DEMO PURPOSES. \n  // To be replaced by the API call to get the user ID\n  // Simultaniously, the Test UserID should be matched in the backend, @: backend/controllers/remedyController.js\n  const userId = \"64297844df5a9bc1c56deb32\";\n  return userId;\n};","map":{"version":3,"names":["axios","MongoConnect","create","baseURL","headers","getSymptoms","term","dbUrl","localUrl","response","get","params","symptomName","console","log","data","error","getRemedyRecommendation","symptomsUser","getRemedy","_id","getRatings","putRating","remedy","formValues","put","getUsers","userId"],"sources":["/home/christina/udemy/webdev/wt23-naturdoc/app/frontend/src/data/api.js"],"sourcesContent":["import axios from \"axios\";\n\n\nconst MongoConnect = axios.create({\n  baseURL: 'http://localhost:7000',\n    headers: {\n\n      },\n    }\n);\n\n// --------------------- SYMPTOMS --------------------- //\n\n// Get list of symptoms from backend, if not available, get from local symptoms.JSON\nexport const getSymptoms = async (term) => {\n    const dbUrl = \"http://localhost:7000/getSymptoms\";\n    const localUrl = '/db/symptoms.json';\n  try {\n    let response = await axios.get(dbUrl, {\n      params: {\n        symptomName: term,\n      },\n    });\n    console.log(\"Get list of symptoms from backend:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n\n    try {\n      let response = await axios.get(localUrl, {\n        params: {\n          symptomName: term,\n        },\n      });\n      console.log(\"Backup list of symptoms local JSON:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\n\n\n// --------------------- REMEDIES --------------------- //\n\n// Get list of recommended remedies from backend given the symptoms provided by the user\nexport const getRemedyRecommendation = async (term) => {\n    try {\n        const response = await MongoConnect.get(\n            \"/getRemedyRecommendation\",\n            {\n            params: {\n              symptomsUser: term,\n            },\n          });\n        console.log(\"get remedy recommendations response:\", response.data);\n        return response.data;\n    } catch (error) {\n        console.log(error);\n    }\n    }\n\n// Get a specific remedy by Id from the backend\nexport const getRemedy = async (_id) => {\n    try {\n        const response = await MongoConnect.get(`/remedies/${_id}`);\n        console.log(\"get remedy by id response:\", response.data);\n        return response.data;\n    } catch (error) {\n        console.log(error);\n    }\n    }\n\n\n// --------------------- RATINGS --------------------- //\n\n// Get a specific remedy's ratings from the backend\nexport const getRatings = async (term) => {\n    try {\n        const response = await MongoConnect.get(`/remedies/${term}/ratings`);\n        console.log('get rating response:', response.data);\n        return response.data;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n// Post a rating to the backend\nexport const putRating = async (remedy, formValues) => {\n    try {\n        const response = await MongoConnect.put(`/remedies/${remedy._id}/`,\n        {\n            data: {\n              ...formValues,\n            },\n          }\n        );\n        console.log('put rating response:', response.data);\n        return response.data;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n// --------------------- USERS --------------------- //\n\nexport const getUsers =  () => {\n// HARD-CODED FOR TESTINGS AND DEMO PURPOSES. \n    // To be replaced by the API call to get the user ID\n    // Simultaniously, the Test UserID should be matched in the backend, @: backend/controllers/remedyController.js\n    const userId = \"64297844df5a9bc1c56deb32\"\n\n    return  (userId)\n  }\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}